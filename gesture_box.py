gesture_strings = {
    'left_to_right_line': 'eNq1WMtSI0cQvM+PwMVE17vrB9irI/gABwYFELsGBWht79+7p0qPHoE044NExAhyslPVmdU9La5fvr/8/evmafWx+fm+Gr5t39dluH5cw3B39Xr/1+pqWGP7tb3R8HF39bF5f/u++mh/8nD9Yy3D9Zcid0Eb1jpKWRu/fnt53YzD6jjMTwz7fWQNa8gKxhJ+tSGAw+1v5aZocUexWtkNodpYz7/jfYr7Sk6ExZWNXajd/vP+/MdwfIwMT6c/4WknXqComhcSlMILxGPqYEvERUphpdpQR3KeF68h7ovEkYUUrEIxLVpnxTHcR1gizrXuqm7ew7w2hjYdtEWqF6FaiMgFVDpxNHHjgnnVeV8wEkW5lHxkil2mUnauWLNWKx/kqf7PdsQIFbtQuUhlBsmrQidOlQC07q7ztVOkSnAh9ciVulxJuCIZm9ZSvQnv1bEaOmAtwJWR5puGIlWSy4hHptRlimjdj7h26lgPK2nBUqKIlPwi4hyJcpcooLQpOxRnhdbUnTio9dvjEvmIlOlS8hEqd6EWYwSQglbRqXCXKiDkKkqDfD5Wjli5i7VwtTYFz+ukaYqJiEpVtNL6B+b7nSNY9gvJS0Qr22hHdcn9yzQyEO/U0Q+PjsZa4L1EtEJ7+X3dcbVugy+lybaP39aPbeueVY9kRQ7q4yLdb8JsuJUfa4eudHCXefUIVmyvjkX50DtOclBnZyYGii3Bqs6LR6ziB/FDv6u2ZckH8XpwpVT1+f1dI1SFBeIAtXt0KMybrhGp0hJxnmzvNu+5RqIqS8Qra79U53tdI1C1BeIIBcTUt7HygsojUF0SKHad2Lznec8tAjVY0Oho00af1448bXaJtof1ZGtckKZFmiYLpAm1O/WGI+N3gIf31ep1f6I3HY/0bdj1LRDclOGWRG68f/GwWVsd7kcGnmZ4Mvwko5ZgsJ5mQDDarZMMDIae0aBg2BkGB8PLaYaMjLbXJ6O2twZqgJgT1JKgBcgN7F80MjgZ4RzqdpgmGGahp50G09HaGB5mEeQ0TGKYhz9EWZfZF8PCnxZ4MrJyD0tIKcAKCYYLZOlCxQQlwZogf7bGw4XxVjByOh4u0NbRagnWBGUCeoLpRq2fZwAlZs4FzlBgRzmq7xQfk09nJCkpcobCSbEzlPCv7W5J8Zhz++4ZKJYpaonWKRquMR0peKJTLqRTzMeVdJR0in06MP0QnqJpgRxxc9ateT57vaPkrPWoupy1wRTNWRudqTktsKPq0gKTCYppwXa1f5kJwo6yrFkwzallKT9tq7Xvc8C0za1fJ+0MPqKy67Iv1hdg2CaAZyiWFNtRUjtsk12X7VBPFCYolURxikKiNEWbH/noeF69PD1v4n824wb3KcJG+eflcfMcjNGv2N8aunn7sXq/f31YxR2Jo8aIbx9xf6zf3x5/PqTy2AntINKeiuztyAraHvXjOeTmPyTQtjs=',
    'right_to_left_line': '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',
    'bottom_to_top_line': 'eNq1WNtuGzcQfdePxC8xOPeZH3BfC/gDCicRHCOpLdhO2/x9Z7lcLWlvqwKLCgZkH80eDs8hZ0a+evj28MfP6/vjy+uP5+Phl/Z+KoerLyc43H54vPv9+OFwwvw13+jwcvvh5fX56dvxJf/kw9X3kxyuNklua9jhpBOV5fOnp4fH1+kxnx6Lf3js1ynqcII5gymFn/kI4OHmY7lWVhMkp6KkiDKl89f0MR1uynUBDSpOYsSu4Zqff7r792W4LiOH+7aCBLsFOCPkEiU3fL+Qc2GPABJmVTG/TF63DraSO5GAF9VgY91H7pU8VnIyZMRQLY4BK3f+6UIFJUglRC9SY9Ue4UzNAUBoKShCyusdt3AhFsf8XLQIXibHSk4ruQqEglsJx8Kmjf3jRF/SA6RcxUSKMcVl/uooro4yKZnlsxicXuwjr47i6mjapsktAiWMch87+aupuJpKCsxhHimzeoF99FSNJfi/6Ku1tFpLqK6mok6eP7JTHarW0mothoBaZq55bUo5X6jKT3kbkjfQQhglTbvIX92l1V1UzUoSyC6Zre5kr97S6i2iu3NWgigCCIX38XM1l1dzsWS9KRDoebuC9tJXc3k1FwxSmJImhuUGfKc8XM3l1VwgMufSSqbB3vyrubyaCyXpjZ1SIDBR28lf7eXV3mJ5/CWTz/pDxKP+kZXTssG4m8J/YJdqrqzmZqEkdMvSSSk/YdFd9NVcWc0t4FnSsplmR1J1c+noIYt0sGCWjrzaRS93FKnmSjO3dup01JMhO5XlPnQfffVW7EzPeWtLFh+kVMamrrSHvTorcWa3vLOY9cbCp6495A6T5CV5AzTbwmXptTqrsLDD1L2L5xhQMA//Llu12qp05ibLPpVlh4tmpqXXJRGkgDZAJT9fpq+u6tlVyMRKZIaSFU2y6Owr91pd1bOrecbRSPJK5QhS8mDuGUO0mqpnU5EwSzBItpTIUQF1x/xk1VI7W4oKJSkiWyHldGd7qKujdnYUs0KtbSSL2R7uaqed7aR2PSlFJUa7IMn0zeDz8/H4eJ7z84kc9M0OVzdc4LocboA8315POd/eTWCZwbiO/mVTRPQRLO8jvAwRPp2x9UVTBPQRonVpxx7UsvEYDRFbxDxFUHiNsEYsPehbxDpHWI0I2NiTzREyRWBm8D7C+wiAeenoQcQKRulBshmEHmR6n2TgEBEbEdRHiGxENH24RkwaT6AMoMyg9qC1SBvAFuk96DSDMYCzEVBKjwY0FAZUGooDGg2lDqVCDeUB9Yb2+yJYVtMBfXN+uYb028w+1R70AX2jrtaQGEJaztB2TRUlbmjbNc6oNRR7lNvSQANKGzkDDyFNcGgSwIwuCTUJyoJu0FkfIk1n8AHlDQkghpAtebEMIc0thB7V5hbigG6JjjSELHTco+38AsqAwhbdII41t3DQw5ZFBj18WWSQwNtOaNi1N16CN+h7uQh7D903cibqQ6LlQcORiC23SIaQLbdIh5C2c7IOrRX5PbcPIYsM0V2G/JI+o1wGVDfoGPoQaHtkHNCtm8F9VWRoG2DuUWzZcdNDZ3TLDtYhJLZStT6EyhaLdx2HacsbjiGk3WgpPcpbwgt0/Y653V3BAd2SWGgIsY28pW+wLM0FkQFtYooO6JKHvUE3FvEhpDUEiQFtemgZ0OauDhJIq3uKb9D3S+sgwVKFdNi10oZ2Okig7VzrIIFu3S8d9FjKlw4S6NYp00GPpcLZoIe1Ddigx1LUbNCjtfMcK2c0ZrQ1JuNu9uKlAJoMaNPZtEeXsmg2oEtmPqC4odAwcfJSOYcpk70lP02W88j79fhw//V1+hd0DpbZ5aZ9JPznw5fXrxXNgbnOBAm+Pn0/Pt89fj7WD7h+ZZrwNo7/dnp++vLj80wmSTb9/6xofoWdxu+S1ffl0/XfhK61Pg=='
}

from kivy.uix.boxlayout import BoxLayout
# BEGIN GESTURE_DB
from kivy.gesture import GestureDatabase

gestures = GestureDatabase()
for name, gesture_string in gesture_strings.items():
    gesture = gestures.str_to_gesture(gesture_string)
    gesture.name = name
    gestures.add_gesture(gesture)
# END GESTURE_DB


# BEGIN GESTUREBOX
class GestureBox(BoxLayout):
    def __init__(self, **kwargs):
        for name in gesture_strings:
            self.register_event_type('on_{}'.format(name))
        super(GestureBox, self).__init__( ** kwargs)

    def on_left_to_right_line(self):
        pass

    def on_right_to_left_line(self):
        pass

    def on_bottom_to_top_line(self):
        pass

    def on_touch_down(self, touch):
        touch.ud['gesture_path'] = [(touch.x, touch.y)]
        super(GestureBox, self).on_touch_down(touch)

    def on_touch_move(self, touch):
        touch.ud['gesture_path'].append((touch.x, touch.y))
        super(GestureBox, self).on_touch_move(touch)

    def on_touch_up(self, touch):
        print(touch.ud['gesture_path'])
        super(GestureBox, self).on_touch_up(touch)
# END GESTUREBOX

